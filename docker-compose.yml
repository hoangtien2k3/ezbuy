version: '3.9'

services:
  #postgresql:
  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: postgres
    build: ./docker/postgres
    hostname: ${POSTGRES_HOSTNAME}
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./docker/postgres/postgresql.conf.sample:/usr/share/postgresql/postgresql.conf.sample
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/postgres_init.sql
      - postgres:/var/lib/postgresql/data
    command: postgres -c 'max_connections=500'
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    networks:
      - ezbuy-network

  #pgadmin:
  pgadmin:
    image: dpage/pgadmin4:${PGADMIN_VERSION}
    container_name: pgadmin
    restart: unless-stopped
    ports:
      - "${PGADMIN_LISTEN_PORT}:80"
    volumes:
      - pgadmin:/var/lib/pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL
      - PGADMIN_DEFAULT_PASSWORD
    networks:
      - ezbuy-network

  #keycloak:
  keycloak:
    image: keycloak/keycloak:${KEYCLOAK_VERSION}
    container_name: keycloak
    command: start-dev
    restart: always
    depends_on:
      - postgres
    ports:
      - "${KEYCLOAK_PORT}:8080"
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      # KC_DB: h2
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      # KC_PROXY_ADDRESS_FORWARDING: true
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      # KC_HTTP_ENABLED: true
      KC_HTTP_PORT: 8080
      KC_HTTPS_PORT: 8443
    volumes:
#      - ./docker/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
      - ./docker/keycloak/themes/ezbuy/theme:/opt/keycloak/themes
      - keycloak:/opt/keycloak/data
    networks:
      - ezbuy-network

  #minio
  minio:
    image: minio/minio:${MINIO_VERSION}
    container_name: minio
    env_file: .env
    restart: unless-stopped
    ports:
      - "9000:9000" #Buckets
      - "9001:9001" #Console
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
#      - ./docker/minio/data:/data:ro
      - minio:/data:rw
    command: [ "server", "--address", ":9000", "--console-address", ":9001", "/data" ]
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:9000/minio/health/live" ]
      interval: 60s
      timeout: 10s
      retries: 3
    networks:
      - ezbuy-network

  #swagger-ui
  swagger-ui:
    image: swaggerapi/swagger-ui:${SWAGGER_VERSION}
    container_name: swagger-ui
    restart: unless-stopped
    environment:
      - BASE_URL=/swagger-ui
      - URLS
      - OAUTH_CLIENT_ID=swagger-ui
      - OAUTH_USE_PKCE=true
    networks:
      - ezbuy-network

  #zookeeper
  zookeeper:
    image: debezium/zookeeper:${ZOOKEEPER_VERSION}
    restart: always
    container_name: zookeeper
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    networks:
      - ezbuy-network

  #kafka
  kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    hostname: ${KAFKA_SERVICE_HOST}
    depends_on:
      - zookeeper
    container_name: kafka
    restart: unless-stopped
    ports:
      - ${KAFKA_SERVICE_PORT}:${KAFKA_SERVICE_PORT}
      - "29092:29092"
    environment:
      - KAFKA_BROKER_ID
      - KAFKA_ZOOKEEPER_CONNECT
      - KAFKA_ADVERTISED_LISTENERS
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
      - KAFKA_INTER_BROKER_LISTENER_NAME
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
    networks:
      - ezbuy-network

  #kafka-connect
  kafka-connect:
    image: debezium/connect:${KAFKA_CONNECT_VERSION}
    restart: always
    container_name: kafka-connect
    ports:
      - "8083:8083"
      - "5005:5005"
    depends_on:
      - kafka
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=kafka_connect_configs
      - OFFSET_STORAGE_TOPIC=kafka_connect_offsets
    networks:
      - ezbuy-network

  ###########################
  #setup
  #elasticsearch
  #logstash
  #kibana
  ###########################
  setup:
    profiles:
      - setup
    build:
      context: ./docker/setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: setup
    init: true
    volumes:
      - ./docker/setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./docker/setup/lib.sh:/lib.sh:ro,Z
      - ./docker/setup/roles:/roles:ro,Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    depends_on:
      - elasticsearch
    networks:
      - ezbuy-network

  #elasticsearch
  elasticsearch:
    build:
      context: ./docker/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: elasticsearch
    volumes:
      - ./docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      discovery.type: single-node
    restart: unless-stopped
    networks:
      - ezbuy-network

  #logstash
  logstash:
    build:
      context: ./docker/logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: logstash
    volumes:
      - ./docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - "5044:5044"
      - "50000:50000/tcp"
      - "50000:50000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - ezbuy-network

  #kibana
  kibana:
    build:
      context: ./docker/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: kibana
    volumes:
      - ./docker/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "5601:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - ezbuy-network

  #redis
  redis:
    image: redis:${REDIS_VERSION}
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis:/data
    environment:
      - REDIS_PASSWORD
      - REDIS_PORT
      - REDIS_DATABASES
    healthcheck:
      test: [ "CMD", "sh", "-c", "redis-cli -a $${REDIS_PASSWORD} ping" ]
      interval: 10s
      retries: 3
      start_period: 30s
      timeout: 5s
    networks:
      - ezbuy-network

  #redis_insight
  redis_insight:
    image: redislabs/redisinsight:latest
    container_name: redis_insight
    restart: always
    ports:
      - "8005:8001"
    volumes:
      - redis_insight:/db
    networks:
      - ezbuy-network

  ###########################
  #kong-database
  #kong-migrations
  #kong-gateway
  ###########################
  kong-database:
    image: postgres:13
    container_name: kong-database
    restart: always
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kongpass
    ports:
      - "5435:5432"
    networks:
      - ezbuy-network

  kong-migrations:
    image: kong/kong-gateway:3.8.1.0
    container_name: kong-migrations
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: ${KONG_DATABASE}
      KONG_PG_HOST: ${KONG_PG_HOST}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PASSWORD: test
    command: "kong migrations bootstrap"
    networks:
      - ezbuy-network

  kong-gateway:
    image: kong/kong-gateway:3.8.1.0
    container_name: kong-gateway
    restart: always
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: ${KONG_DATABASE}
      KONG_PG_HOST: ${KONG_PG_HOST}
      KONG_PG_PORT: ${KONG_PG_PORT}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: ${KONG_ADMIN_LISTEN}
      KONG_ADMIN_GUI_URL: ${KONG_ADMIN_GUI_URL}
      KONG_LICENSE_DATA: ""
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
      - "8445:8445"
      - "8003:8003"
      - "8004:8004"
    networks:
      - ezbuy-network

  #portainer
  portainer:
    image: portainer/portainer-ce:2.27.1
    container_name: portainer
    restart: always
    ports:
      - "9999:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - ezbuy-network

  #auth-service
  auth-service:
    build: ./auth-service
    image: hoangtien2k3/ezbuy-auth-service:latest
    container_name: ezbuy-auth-service
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/auth
      - SPRING_R2DBC_USERNAME
      - SPRING_R2DBC_PASSWORD
      - KEYCLOAK_SERVERURL
      - KEYCLOAK_REALM
      - KEYCLOAK_CLIENTID
      - KEYCLOAK_CLIENTSECRET
      - KEYCLOAK_GRANTTYPE
      - CLIENT_KEYCLOAK_ADDRESS
      - MINIO_BASEURL
      - MINIO_PUBLICURL
      - MINIO_ACCESSKEY
      - MINIO_SECRETKEY
      - MINIO_BUCKET
    volumes:
      - ./deployment/app-config:/app-config
    ports:
      - "8089:8089"
    networks:
      - ezbuy-network

  #cart-service
  cart-service:
    build: ./cart-service
    image: hoangtien2k3/ezbuy-cart-service:latest
    container_name: ezbuy-cart-service
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/cart
      - SPRING_R2DBC_USERNAME
      - SPRING_R2DBC_PASSWORD
      - KEYCLOAK_SERVERURL
      - KEYCLOAK_REALM
      - KEYCLOAK_CLIENTID
      - KEYCLOAK_CLIENTSECRET
      - KEYCLOAK_GRANTTYPE
      - CLIENT_KEYCLOAK_ADDRESS
    volumes:
      - ./deployment/app-config:/app-config
    ports:
      - "8918:8918"
    networks:
      - ezbuy-network

  #notification-send
  notification-send:
    build: ./notification-send
    image: hoangtien2k3/ezbuy-notification-send:latest
    container_name: ezbuy-notification-send
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/notification
      - SPRING_R2DBC_USERNAME
      - SPRING_R2DBC_PASSWORD
      - KEYCLOAK_SERVERURL
      - KEYCLOAK_REALM
      - KEYCLOAK_CLIENTID
      - KEYCLOAK_CLIENTSECRET
      - KEYCLOAK_GRANTTYPE
      - CLIENT_KEYCLOAK_ADDRESS
    volumes:
      - ./deployment/app-config:/app-config
    ports:
      - "8888:8888"
    networks:
      - ezbuy-network

  #notification-service
  notification-service:
    build: ./auth-service
    image: hoangtien2k3/ezbuy-notification-service:latest
    container_name: ezbuy-notification-service
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/notification
      - SPRING_R2DBC_USERNAME
      - SPRING_R2DBC_PASSWORD
      - KEYCLOAK_SERVERURL
      - KEYCLOAK_REALM
      - KEYCLOAK_CLIENTID
      - KEYCLOAK_CLIENTSECRET
      - KEYCLOAK_GRANTTYPE
      - CLIENT_KEYCLOAK_ADDRESS
    volumes:
      - ./deployment/app-config:/app-config
    ports:
      - "7777:7777"
    networks:
      - ezbuy-network

  #payment-service
  payment-service:
    build: ./payment-service
    image: hoangtien2k3/ezbuy-payment-service:latest
    container_name: ezbuy-payment-service
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/payment
      - SPRING_R2DBC_USERNAME
      - SPRING_R2DBC_PASSWORD
      - KEYCLOAK_SERVERURL
      - KEYCLOAK_REALM
      - KEYCLOAK_CLIENTID
      - KEYCLOAK_CLIENTSECRET
      - KEYCLOAK_GRANTTYPE
      - CLIENT_KEYCLOAK_ADDRESS
    volumes:
      - ./deployment/app-config:/app-config
    ports:
      - "8089:8089"
    networks:
      - ezbuy-network

  #product-service
  product-service:
    build: ./product-service
    image: hoangtien2k3/ezbuy-product-service:latest
    container_name: ezbuy-product-service
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/product
      - SPRING_R2DBC_USERNAME
      - SPRING_R2DBC_PASSWORD
      - KEYCLOAK_SERVERURL
      - KEYCLOAK_REALM
      - KEYCLOAK_CLIENTID
      - KEYCLOAK_CLIENTSECRET
      - KEYCLOAK_GRANTTYPE
      - CLIENT_KEYCLOAK_ADDRESS
    volumes:
      - ./deployment/app-config:/app-config
    ports:
      - "8950:8950"
    networks:
      - ezbuy-network

  #rating-service
  rating-service:
    build: ./rating-service
    image: hoangtien2k3/ezbuy-rating-service:latest
    container_name: ezbuy-rating-service
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/rating
      - SPRING_R2DBC_USERNAME
      - SPRING_R2DBC_PASSWORD
      - KEYCLOAK_SERVERURL
      - KEYCLOAK_REALM
      - KEYCLOAK_CLIENTID
      - KEYCLOAK_CLIENTSECRET
      - KEYCLOAK_GRANTTYPE
      - CLIENT_KEYCLOAK_ADDRESS
    volumes:
      - ./deployment/app-config:/app-config
    ports:
      - "8950:8950"
    networks:
      - ezbuy-network

  #rating-service
  search-service:
    build: ./search-service
    image: hoangtien2k3/ezbuy-search-service:latest
    container_name: ezbuy-search-service
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/search
      - SPRING_R2DBC_USERNAME
      - SPRING_R2DBC_PASSWORD
      - KEYCLOAK_SERVERURL
      - KEYCLOAK_REALM
      - KEYCLOAK_CLIENTID
      - KEYCLOAK_CLIENTSECRET
      - KEYCLOAK_GRANTTYPE
      - CLIENT_KEYCLOAK_ADDRESS
    volumes:
      - ./deployment/app-config:/app-config
    ports:
      - "8999:8999"
    networks:
      - ezbuy-network

  #setting-service
  setting-service:
    build: ./setting-service
    image: hoangtien2k3/ezbuy-setting-service:latest
    container_name: ezbuy-setting-service
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/setting
      - SPRING_R2DBC_USERNAME
      - SPRING_R2DBC_PASSWORD
      - KEYCLOAK_SERVERURL
      - KEYCLOAK_REALM
      - KEYCLOAK_CLIENTID
      - KEYCLOAK_CLIENTSECRET
      - KEYCLOAK_GRANTTYPE
      - CLIENT_KEYCLOAK_ADDRESS
      - MINIO_BASEURL
      - MINIO_PUBLICURL
      - MINIO_ACCESSKEY
      - MINIO_SECRETKEY
      - MINIO_BUCKET
    volumes:
      - ./deployment/app-config:/app-config
    ports:
      - "8082:8082"
    networks:
      - ezbuy-network

  #trigger-service
  trigger-service:
    build: ./trigger-service
    image: hoangtien2k3/ezbuy-trigger-service:latest
    container_name: ezbuy-trigger-service
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/trigger
      - SPRING_R2DBC_USERNAME
      - SPRING_R2DBC_PASSWORD
      - KEYCLOAK_SERVERURL
      - KEYCLOAK_REALM
      - KEYCLOAK_CLIENTID
      - KEYCLOAK_CLIENTSECRET
      - KEYCLOAK_GRANTTYPE
      - CLIENT_KEYCLOAK_ADDRESS
    volumes:
      - ./deployment/app-config:/app-config
    ports:
      - "8999:8999"
    networks:
      - ezbuy-network

# networks:
networks:
  ezbuy-network:
    driver: bridge
    name: ezbuy-network
    external: true
#  proxy:
#    external: true
#  keycloak:

# volumes:
volumes:
  postgres:
  pgadmin:
  keycloak:
  minio:
  memos:
  elasticsearch:
  redis:
  redis_insight:
  portainer_data:
