version: '3.9'

services:
  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: postgres
    build: ./docker/postgres
    hostname: ${POSTGRES_HOSTNAME}
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./docker/postgres/postgresql.conf.sample:/usr/share/postgresql/postgresql.conf.sample
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/postgres_init.sql
      - postgres:/var/lib/postgresql/data
    command: postgres -c 'max_connections=500'
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    networks:
      - ezbuy-network

  keycloak:
    image: keycloak/keycloak:${KEYCLOAK_VERSION}
    container_name: keycloak
    command: start-dev
    restart: always
    depends_on:
      - postgres
    ports:
      - "${KEYCLOAK_PORT}:8080"
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      # KC_DB: h2
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      # KC_PROXY_ADDRESS_FORWARDING: true
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      # KC_HTTP_ENABLED: true
      KC_HTTP_PORT: 8080
      KC_HTTPS_PORT: 8443
    volumes:
      - ./docker/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
      - ./docker/keycloak/themes/ezbuy/theme:/opt/keycloak/themes
      - keycloak:/opt/keycloak/data
    networks:
      - ezbuy-network

  minio:
    image: minio/minio:${MINIO_VERSION}
    container_name: minio
    env_file: .env
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio:/data:rw
    command: [ "server", "--address", ":9000", "--console-address", ":9001", "/data" ]
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:9000/minio/health/live" ]
      interval: 60s
      timeout: 10s
      retries: 3
    networks:
      - ezbuy-network

  #elasticsearch
  elasticsearch:
    build:
      context: ./docker/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: elasticsearch
    volumes:
      - ./docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      discovery.type: single-node
    restart: unless-stopped
    networks:
      - ezbuy-network

  #logstash
  logstash:
    build:
      context: ./docker/logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: logstash
    volumes:
      - ./docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - "5044:5044"
      - "50000:50000/tcp"
      - "50000:50000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - ezbuy-network

  #kibana
  kibana:
    build:
      context: ./docker/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: kibana
    volumes:
      - ./docker/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "5601:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - ezbuy-network

  ###########################
  #portainer -> mini docker
  ###########################
  #portainer
  portainer:
    image: portainer/portainer-ce:2.27.1
    container_name: portainer
    restart: always
    ports:
      - "9999:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer:/data
    networks:
      - ezbuy-network

  ###########################
  #consul -> discovery
  ###########################
  consul:
    image: consul:1.15.4
    container_name: consul
    restart: always
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: "consul agent -dev -client=0.0.0.0"

# networks:
networks:
  ezbuy-network:
    driver: bridge
    name: ezbuy-network
    external: true
#  proxy:
#    external: true

# volumes:
volumes:
  postgres:
  pgadmin:
  keycloak:
  minio:
  elasticsearch:
  portainer:
